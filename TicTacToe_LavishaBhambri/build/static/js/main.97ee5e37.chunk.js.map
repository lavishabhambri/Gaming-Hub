{"version":3,"sources":["logo.svg","App.js","index.js"],"names":["App","TicTacToe","props","state","display","useComputer","player1","player2","p1Score","p2Score","turn","winner","tiles","id","class","value","tilesLeft","gameType","bind","playersCheck","reset","turnCheck","updateSquare","computersMove","calcWinner","findWinner","checkWinner","newGame","e","this","setState","target","innerHTML","board","i","parseInt","replace","setTimeout","squares","completed","index","Math","floor","random","length","calculated","ended","winCombos","r1","r2","r3","onClick","endGame","React","Component","PromptOne","PromptTwo","Board","className","text","map","t","Square","Winner","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97ee5e37.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n// import * as React from \"https://cdn.skypack.dev/react@17.0.1\";\n// import * as ReactDOM from \"https://cdn.skypack.dev/react-dom@17.0.1\";\n\n/*******************************/\n/*            React            */\n/*******************************/\n\n/* Main Component */\nclass TicTacToe extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      display: \"Prompt One\",\n      useComputer: false,\n      player1: \"\",\n      player2: \"\",\n      p1Score: 0,\n      p2Score: 0,\n      turn: \"Player 1\",\n      winner: \"\",\n      tiles: [\n        { id: \"square1\", class: \"square\", value: \"\" },\n        { id: \"square2\", class: \"square\", value: \"\" },\n        { id: \"square3\", class: \"square\", value: \"\" },\n        { id: \"square4\", class: \"square\", value: \"\" },\n        { id: \"square5\", class: \"square\", value: \"\" },\n        { id: \"square6\", class: \"square\", value: \"\" },\n        { id: \"square7\", class: \"square\", value: \"\" },\n        { id: \"square8\", class: \"square\", value: \"\" },\n        { id: \"square9\", class: \"square\", value: \"\" }\n      ],\n      tilesLeft: 9\n    };\n\n    this.gameType = this.gameType.bind(this);\n    this.playersCheck = this.playersCheck.bind(this);\n    this.reset = this.reset.bind(this);\n    this.turnCheck = this.turnCheck.bind(this);\n    this.updateSquare = this.updateSquare.bind(this);\n    this.computersMove = this.computersMove.bind(this);\n    this.calcWinner = this.calcWinner.bind(this);\n    this.findWinner = this.findWinner.bind(this);\n    this.checkWinner = this.checkWinner.bind(this);\n    this.newGame = this.newGame.bind(this);\n  }\n\n  gameType(e) {\n    this.setState({\n      useComputer: e.target.innerHTML === \"Player vs Computer\" ? true : false,\n      display: \"Prompt Two\"\n    });\n  }\n\n  playersCheck(e) {\n    this.setState({\n      player1: e.target.innerHTML,\n      player2: e.target.innerHTML === \"X\" ? \"O\" : \"X\",\n      display: \"Board\"\n    });\n  }\n\n  reset() {\n    this.setState({\n      display: \"Prompt One\",\n      useComputer: false,\n      player1: \"\",\n      player2: \"\",\n      p1Score: 0,\n      p2Score: 0,\n      turn: \"Player 1\",\n      winner: \"\",\n      tiles: [\n        { id: \"square1\", class: \"square\", value: \"\" },\n        { id: \"square2\", class: \"square\", value: \"\" },\n        { id: \"square3\", class: \"square\", value: \"\" },\n        { id: \"square4\", class: \"square\", value: \"\" },\n        { id: \"square5\", class: \"square\", value: \"\" },\n        { id: \"square6\", class: \"square\", value: \"\" },\n        { id: \"square7\", class: \"square\", value: \"\" },\n        { id: \"square8\", class: \"square\", value: \"\" },\n        { id: \"square9\", class: \"square\", value: \"\" }\n      ],\n      tilesLeft: 9\n    });\n  }\n\n  turnCheck() {\n    const { turn } = this.state;\n\n    if (turn === \"Player 1\") {\n      return \"Player 1's turn!\";\n    } else if (turn === \"Player 2\") {\n      return \"Player 2's turn!\";\n    } else {\n      return \"Computer's turn!\";\n    }\n  }\n\n  updateSquare(e) {\n    const { turn } = this.state;\n\n    // Copies the value of the tiles to a variables\n    // and gets the tile that was selected\n    const board = [...this.state.tiles];\n    const i = parseInt(e.target.id.replace(\"square\", \"\")) - 1;\n\n    // Prevents players from using already used tiles and from making moves\n    // after the game is finished or during the Computer's turn\n    if (this.state.winner || board[i].value || turn === \"Computer\") return;\n\n    // Updates selected tiles when tiles are available\n    if (this.state.tilesLeft > 0) {\n      if (turn === \"Player 1\") {\n        board[i].value = this.state.player1;\n        board[i].class += \" disabled\";\n\n        this.setState((state) => ({\n          turn: state.useComputer ? \"Computer\" : \"Player 2\",\n          tilesLeft: state.tilesLeft - 1\n        }));\n\n        // Allows the Computer to make a move\n        if (this.state.useComputer) {\n          setTimeout(() => this.computersMove(), 1000);\n        }\n      } else {\n        board[i].value = this.state.player2;\n        board[i].class += \" disabled\";\n\n        this.setState((state) => ({\n          turn: \"Player 1\",\n          tilesLeft: state.tilesLeft - 1\n        }));\n      }\n    }\n\n    // Allows \"Draws\" to be found\n    setTimeout(() => this.findWinner(), 100);\n  }\n\n  computersMove() {\n    const squares = [...this.state.tiles];\n    let completed = false;\n\n    // Prevents computer from making any moves when the game is over\n    if (this.state.winner) return;\n\n    // Loops until a tile with no value is used when tiles are available\n    while (!completed && this.state.tilesLeft > 0) {\n      const index = Math.floor(Math.random() * squares.length);\n\n      // Prevents the computer from using tiles used by Player 1\n      if (squares[index].value == \"\") {\n        completed = true;\n        squares[index].value = this.state.player2;\n        squares[index].class += \" disabled\";\n\n        this.setState((state) => ({\n          turn: \"Player 1\",\n          tilesLeft: state.tilesLeft - 1\n        }));\n      }\n    }\n\n    this.findWinner();\n  }\n\n  findWinner() {\n    const calculated = this.calcWinner();\n    let ended = true;\n\n    // Determines the winner\n    if (calculated == this.state.player1) {\n      this.setState((state) => ({\n        winner: \"Player 1\",\n        p1Score: state.p1Score + 1\n      }));\n    } else if (calculated == this.state.player2) {\n      this.setState((state) => ({\n        winner: state.useComputer ? \"Computer\" : \"Player 2\",\n        p2Score: state.p2Score + 1\n      }));\n    } else {\n      if (this.state.tilesLeft == 0) {\n        this.setState({ winner: \"Draw\" });\n      } else {\n        ended = false;\n      }\n    }\n\n    // Starts a new game once the current game has ended\n    if (ended) setTimeout(() => this.newGame(), 5000);\n  }\n\n  calcWinner() {\n    const squares = [...this.state.tiles];\n    const winCombos = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    // Loops through all possible winning combinations\n    for (let i = 0; i < winCombos.length; i++) {\n      const [r1, r2, r3] = winCombos[i];\n\n      if (\n        squares[r1].value === squares[r2].value &&\n        squares[r1].value === squares[r3].value &&\n        squares[r2].value === squares[r3].value\n      ) {\n        return squares[r1].value;\n      }\n    }\n\n    return null;\n  }\n\n  checkWinner() {\n    switch (this.state.winner) {\n      case \"Player 1\":\n        return \"Player 1 wins!\";\n      case \"Player 2\":\n        return \"Player 2 wins!\";\n      case \"Computer\":\n        return \"Computer wins!\";\n      case \"Draw\":\n        return \"It's a draw!\";\n      default:\n        return \"\";\n    }\n  }\n\n  newGame() {\n    this.setState({\n      turn: \"Player 1\",\n      winner: \"\",\n      tiles: [\n        { id: \"square1\", class: \"square\", value: \"\" },\n        { id: \"square2\", class: \"square\", value: \"\" },\n        { id: \"square3\", class: \"square\", value: \"\" },\n        { id: \"square4\", class: \"square\", value: \"\" },\n        { id: \"square5\", class: \"square\", value: \"\" },\n        { id: \"square6\", class: \"square\", value: \"\" },\n        { id: \"square7\", class: \"square\", value: \"\" },\n        { id: \"square8\", class: \"square\", value: \"\" },\n        { id: \"square9\", class: \"square\", value: \"\" }\n      ],\n      tilesLeft: 9\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"tic-tac-toe\">\n        {this.state.display === \"Prompt One\" ? (\n          <PromptOne onClick={this.gameType} />\n        ) : this.state.display === \"Prompt Two\" ? (\n          <PromptTwo\n            useComputer={this.state.useComputer}\n            onClick={this.playersCheck}\n          />\n        ) : (\n          <Board\n            p1Score={this.state.p1Score}\n            p2Score={this.state.p2Score}\n            useComputer={this.state.useComputer}\n            tiles={this.state.tiles}\n            tilesLeft={this.state.tilesLeft}\n            winner={this.checkWinner()}\n            endGame={this.reset}\n            newGame={this.newGame}\n            updateSquare={this.updateSquare}\n            turn={this.turnCheck()}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\n/* Component for displaying the first prompt */\nconst PromptOne = (props) => {\n  return (\n    <div id=\"prompt\">\n      <h1>Let's get started!</h1>\n\n      <div id=\"options\">\n        <a onClick={props.onClick}>Player vs Computer</a>\n        <a onClick={props.onClick}>Player vs Player</a>\n      </div>\n    </div>\n  );\n};\n\n/* Component for displaying the second prompt */\nconst PromptTwo = (props) => {\n  return (\n    <div id=\"prompt\">\n      <h1>\n        {props.useComputer\n          ? \"Do you want to be X or O?\"\n          : \"Player 1, do you want to be X or O?\"}\n      </h1>\n\n      <div id=\"options\">\n        <a onClick={props.onClick}>X</a>\n        <a onClick={props.onClick}>O</a>\n      </div>\n    </div>\n  );\n};\n\n/* Component for the board */\nconst Board = (props) => {\n  return (\n    <div id=\"board\">\n      <div id=\"heading\">\n        <div className=\"wrapper\">\n          <div className=\"col\">\n            <p>{props.p1Score}</p>\n            <p>Player 1</p>\n          </div>\n\n          <div className=\"col\">\n            <p>{props.p2Score}</p>\n            <p>{props.useComputer ? \"Computer\" : \"Player 2\"}</p>\n          </div>\n        </div>\n\n        <div className=\"col\">\n          {props.winner == \"\" ? <b>{props.turn}</b> : <b>Game Over</b>}\n        </div>\n\n        <a onClick={props.endGame}>End</a>\n      </div>\n\n      {props.winner != \"\" ? <Winner text={props.winner} /> : \"\"}\n\n      <div id=\"rows\">\n        {props.tiles.map((t) => {\n          return (\n            <Square\n              id={t.id}\n              class={t.class}\n              value={t.value}\n              onClick={props.updateSquare}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\n/* Component for displaying the squares on the board */\nconst Square = (props) => {\n  return (\n    <a id={props.id} className={props.class} onClick={props.onClick}>\n      {props.value}\n    </a>\n  );\n};\n\n/* Component for displaying the winner */\nconst Winner = (props) => {\n  return (\n    <div id=\"overlay\">\n      <h1>{props.text === \"\" ? \"\" : props.text}</h1>\n    </div>\n  );\n};\n\nReactDOM.render(<TicTacToe />, document.getElementById('game'));\n\n"],"sourceRoot":""}